import AbstractStatefulVideo from 'zombiebox/zb/device/abstract-stateful-video';
import { PrepareOption, State } from 'zombiebox/zb/device/interfaces/i-stateful-video';
import Rect from 'zombiebox/zb/geometry/rect';
import ViewPort from './view-port';
import Info from './info';
import { Type as DRMType } from 'zombiebox/zb/device/drm/drm';
import {ResolutionInfoItem} from 'zombiebox/zb/device/resolutions';
import IDRMClient from 'zombiebox/zb/device/interfaces/i-drm-client';

export default class StatefulVideo extends AbstractStatefulVideo {
	constructor(panelResolution: ResolutionInfoItem, appResolution: ResolutionInfoItem, version: string);
	prepare(url: string, options: { [key: string]: any }): void;
	play(): void;
	pause(): void;
	stop(): void;
	getPosition(): number;
	setPosition(position: number): void;
	destroy(): void;
	getDuration(): number;
	getVolume(): number;
	setVolume(volume: number): void;
	volumeUp(step?: number): any;
	volumeDown(step?: number): any;
	getMuted(): boolean;
	setMuted(muted: boolean): void;
	getPlaybackRate(): number;
	setPlaybackRate(rate: number): void;
	getUrl(): string;
	getViewport(): ViewPort;
	attachDRM(client: IDRMClient): void;
	detachDRM(type: DRMType): void;
	getEngine(): any;
	static isDRMSupported(type: DRMType): boolean;
	static canHandleMultiDRM(): boolean;
	protected _avplay: any;
	protected _audiocontrol: any;
	protected _videoObject: HTMLObjectElement;
	protected _version: string;
	protected _stateBeforeSeeking: any;
	protected _avplayState: string;
	protected _cachedScreenSaverState: number | null;
	protected _aplayStateInterval: number;
	protected _avplayCallbackActive: boolean;
	protected _stateBeforeWaiting: any;
	protected _playbackRate: number;
	protected _url: string | null;
	protected _viewport: ViewPort;
	protected _drmHooks: any;
	protected _onErrorBound: () => any;
	protected _isReady: {
		prepareCallback: boolean;
		readyState: boolean;
		bufferingComplete: boolean;
	};
	protected _onDRMErrorBound: (event: any, error: any) => void;
	protected _manageScreenSaverBound: (event: any, newState: any) => void;
	protected _onDRMError(error: Error): void;
	protected _init(): void;
	protected _createAVPlayListener(): any;
	protected _handleAVPlayEvent(event: string, handler?: Function | undefined, ...params: any[]): void;
	protected _onPreparedCallback(): void;
	protected _onSeekCompletedCallback(): void;
	protected _onAVPlayBufferingStart(): void;
	protected _onAVPlayBufferingComplete(): void;
	protected _onAVPlayCurrentTime(currentTime: number): void;
	protected _onAVPlayStreamCompleted(): void;
	protected _checkAVPlayStateChange(): void;
	protected _onAVPlayStateChangeDetected(newState: string): void;
	protected _onDRMEvent(avplayDrmType: AVPlayDrmType, data: any): void;
	protected _onMaybeReady(): void;
	protected _onActuallyReady(): void;
	protected _onVolumeChanged(volume: number): void;
	protected _clearReady(): void;
	protected _failToErrorState<RETURN_TYPE>(func: () => RETURN_TYPE): RETURN_TYPE;
	protected _onError(error: any | Error): void;
	protected _manageScreenSaver(state: any): void;
}
